import app_utilities as au
import os
import streamlit as st

os.environ["DEEPSEEK_API_KEY"] = st.secrets["api_keys"]["deepseek"]

warning_message = """
‚ö†Ô∏è This response is generated by AI and might contain inaccuracies.
This AI model is capable of executing arbitrary Python code in the interpreter.
Any requests which don't comply with our SECURITY NOTE will be DECLINED!
The developers of this application DO NOT ASSUME any form of responsability for how this app might be used or misused!

USE AT YOUR OWN RISK!!
"""

# Use Streamlit's full-width layout
st.set_page_config(
    page_title="ACE - Agentic Code Executor",
    page_icon="ü§ñ",
    layout="wide"
)

# Initialize session state for chat history
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

# Main content area
st.markdown("""
    <div style="display: flex; flex-direction: column; justify-content: center; align-items: center; height: 60vh;">
        <h1 style="text-align: center; margin-bottom: 20px;">ü§ñ ACE</h1>
        <h2 style="text-align: center; margin-bottom: 30px; color: #ccc;">Agentic Code Executor</h2>
        <p style="text-align: center; font-size: 18px; color: #aaa; max-width: 600px;">
            Welcome to ACE! Your AI-powered assistant that can execute Python code to solve complex problems.
        </p>
    </div>
""", unsafe_allow_html=True)



# Display chat history
if st.session_state.chat_history:
    for message in st.session_state.chat_history:
        if message["role"] == "human":
            with st.chat_message("human"):
                st.markdown(message["content"])
        elif message["role"] == "assistant":
            with st.chat_message("assistant"):
                st.markdown(message["content"])

# Chat input
task = st.chat_input("Ask anything")

if task and task.strip() != "":
    # Add user message to chat history
    st.session_state.chat_history.append({
        "role": "human",
        "content": task
    })
    with st.chat_message("human"):
        st.markdown(task)
    try:
        with st.spinner("üß† Working..."):
            with st.chat_message("assistant"):
                container = st.empty()
                # Format chat history for the AI
                formatted_history = []
                for i in range(len(st.session_state.chat_history)):
                    msg = st.session_state.chat_history[i]
                    if msg["role"] == "human":
                        formatted_history.append({"human": msg["content"], "assistant": ""})
                    elif msg["role"] == "assistant":
                        if formatted_history:
                            formatted_history[-1]["assistant"] = msg["content"]
                result = au.call_agent(
                    chat_history=au.format_chat_history(formatted_history),
                    task=task,
                    handler=au.StreamCallbackHandler(container)
                )
        # Add assistant response to chat history
        st.session_state.chat_history.append({
            "role": "assistant",
            "content": result
        })
        st.warning(warning_message)
    except Exception as e:
        error_msg = f"‚ùå An error has occurred: {str(e)}"
        st.error(error_msg)
        print(e)
        # Add error message to chat history
        st.session_state.chat_history.append({
            "role": "assistant",
            "content": error_msg
        })

